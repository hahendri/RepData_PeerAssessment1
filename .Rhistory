filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "05cdbab326e5d454e432",
secret = "e4095b3b7ca9fab1d195a5535e966065ccef9c84")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httr, httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "05cdbab326e5d454e432",
secret = "e4095b3b7ca9fab1d195a5535e966065ccef9c84")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos/datasharing", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
cont_repo <- content(req)
str(cont_repo)
head(cont_repo)
query {
repository(owner: "jtleek", name: "datasharing") {
name
createdAt
}
}
repository(owner: "jtleek", name: "datasharing") {
name
createdAt
}
req <- GET("https://api.github.com/users/jtleek/repos/datasharing", gtoken)
stop_for_status(req)
cont_repo <- content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
cont_repo <- content(req)
json1 = content(cont_repo)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json1 = content(cont_repo)
json2 = jsonlite::fromJSON(toJSON(json1))
find_date <- function(x,url) {
if (x$html_url == url) {
print(x$created_at)
}
}
lapply(cont_repo,find_date,url ="https://github.com/jtleek/datasharing")
install.packages("sqldf")
library(sqldf)
if (!file.exists("data")) {
dir.create("data")
}
file_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(file_url, destfile = "./data/acs.csv")
dateDownloaded <- date()
dateDownloaded
acs <- read.csv("./data/acs.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
f1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
f2 <- sqldf("select * from acs")
f3 <- sqldf("select pwgtp1 from acs")
f4 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")
f2
f3
head(f3)
head(f1)
str(f1)
str(f2)
?sqldf
?close
library(httr)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
html_lines <- c(10, 20, 30, 100)
for (i in html_lines) {
nchar(htmlCode[i])
}
html_lines <- c(10, 20, 30, 100)
x <- nchar()
for (i in html_lines) {
nchar(htmlCode[i])
}
x
x
x = nchar()
for (i in html_lines) {
nchar(htmlCode[i])
}
x
html_lines <- c(10, 20, 30, 100)
l = list()
for (i in html_lines) {
l(i) <- nchar(htmlCode[i])
}
l
html_lines <- c(10, 20, 30, 100)
l = list()
for (i in html_lines) {
l(i) = nchar(htmlCode[i])
}
l
html_lines <- c(10, 20, 30, 100)
l = list()
for (i in html_lines) {
num <- nchar(htmlCode[i])
l(i) = as.list(num)
}
l
html_lines <- c(10, 20, 30, 100)
l = as.list()
for (i in html_lines) {
num <- nchar(htmlCode[i])
l(i) = as.list(num)
}
l
html_lines <- c(10, 20, 30, 100)
l = as.list()
for (i in html_lines) {
num <- nchar(htmlCode[i])
l(num)
}
l
html_lines <- c(10, 20, 30, 100)
L <- list()
for (i in html_lines) {
num <- nchar(htmlCode[i])
l[[paste0("element", i] <- num
}
l
html_lines <- c(10, 20, 30, 100)
L <- list()
for (i in html_lines) {
num <- nchar(htmlCode[i])
l[[paste0("element", i]] <- num
}
l
html_lines <- c(10, 20, 30, 100)
L <- list()
for (i in html_lines) {
num <- nchar(htmlCode[i])
l[[paste0("element", i]] <- num
}
l
?nchar
html_lines <- c(10, 20, 30, 100)
C <- c()
for (i in html_lines) {
num <- nchar(htmlCode[i])
C[[paste0("element", i]] <- num
}
C
html_lines <- c(10, 20, 30, 100)
C <- list()
for (i in html_lines) {
num <- nchar(htmlCode[i])
C[[paste0("element", i)]] <- num
}
C
library(readr)
x <- read_fwf(
file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
?read_fwf
x <- read_fwf(
file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
skip = 4, widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
x <- read_fwf(
file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
x <- read_fwf(
file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
x <- read_fwf(
file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
skip=4)
head(x)
x <- read_fwf(
file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
col_positions = c(12,7,4,9,4,9,4,9,NA))
head(x)
x <- read_fwf(
file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
col_positions = NA)
head(x)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
sum(x[,4])
library(lubridate)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this-this_moment)
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(03:22:14)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- ymd("June 17, 2008", tzone = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tzone = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
?version
R.Version()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low(ppm)
low
hight
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v=median(ppm, col = "magenta", lwd = 4)
abline(v=median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, pm25~region, col = "red")
boxplot(pm25~region, poluttion, col = "red")
boxplot(pm25~region, pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region=="east")
head(east)
hist(east, pm25, col = "green")
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
plot(pollution, )
with(pollution, plot(lattitude, pm25))
with(pollution, plot(latitude, pm25))
abline(x=12)
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
quit()
installed.packages()
install.packages("tidyverse")
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg , facets = . ~ drv)
qplot(hwy, data = mpg , facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg , geom = c("point", "smooth"), facet = . ~ drv)
qplot(displ, hwy, data = mpg , geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(size = 2, alpha = 1/2, aes(color = drv)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length =4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
quit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?llines()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
setwd("C:/Users/Harland/Desktop/Coursera/RepData_PeerAssessment1")
list.files()
if (!file.exists("data")) {
dir.create("data")
}
unzip("./activity.zip", exdir = "./data")
list.files("./data")
data <- read.csv("./data/activity.csv")
str(data)
head(data)
library(dplyr)
library(lubridate)
?as_date
data[,2] <- as_date(data[,2])
str(data)
head(data, 100)
spd <- data %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
as.data.frame(spd)
spd
library(ggplot2)
g <- ggplot(data = spd, aes(x = date, y = steps))
g + geom_histogram()
labs(title = "Total Steps Per Day") +
labs(y = "Steps") +
labs(x = "Date")
?geom_histogram
g <- ggplot(data = spd)
g + geom_histogram()
labs(title = "Total Steps Per Day") +
labs(y = "Steps") +
labs(x = "Date")
str(spd)
hist(spd)
data[,1] <- as.numeric(data[,1])
str(data)
spd <- data %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
as.data.frame(spd)
str(spd)
hist(spd)
hist(spd$steps)
g <- ggplot(data = spd$steps)
g + geom_histogram()
labs(title = "Total Steps Per Day") +
labs(x = "Steps")
g <- ggplot(data = spd)
g + geom_histogram()
g + geom_histogram(x = steps)
g + geom_histogram(x = spd$steps)
hist(spd)
hist(spd$steps)
?hist
hist(spd$steps, main = "Total Steps Per Day", xlab = "Steps", col = "red")
?bin
?binwidth
hist(spd$steps, main = "Total Steps Per Day", xlab = "Steps", col = "red", breaks = 10)
rug(spd$steps)
mean(spd$steps)
mean(spd$steps, na.rm = TRUE)
data
ints <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps)) %>%
as.data.frame(ints)
ints
ints <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = TRUE)) %>%
as.data.frame(ints)
ints
plot(data = ints, x = interval, y = steps, type = "l", xlab = "5-minute Interval of Day",
ylab = "Average Number of Steps (All Days)", main =
"Average Number of Steps per Interval Across All Days")
plot(x = ints$interval, y = ints$steps, type = "l", xlab = "5-minute Interval of Day",
ylab = "Average Number of Steps (All Days)", main =
"Average Number of Steps per Interval Across All Days")
max(ints[,2])
filter(ints, max(ints[,2]))
filter(ints$steps == max(ints[,2]))
str(ints)
filter(ints, steps == max(ints[,2]))
group_by(data, interval)
test <- group_by(data, interval)
summarise(test)
summarise(test, steps = mean(steps, na.rm = TRUE))
ints
is.na(data)
sum(is.na(data))
sum(!is.na(data))
summarise(data, is.na())
summarise(data, sum(is.na(data))
summarise(data, is.na(data))
data %>%
summarise_all(funs(sum(is.na(.))))
sum(is.na(data))
